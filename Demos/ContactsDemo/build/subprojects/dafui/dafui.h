/* dafui.h generated by valac 0.40.10, the Vala compiler, do not modify */


#ifndef __SUBPROJECTS_DAFUI_DAFUI_H__
#define __SUBPROJECTS_DAFUI_DAFUI_H__

#include <glib.h>
#include <glib-object.h>
#include <float.h>
#include <math.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <gdk/gdk.h>
#include "dafcore.h"

G_BEGIN_DECLS


#define DAF_UI_ANIMATION_TYPE_IANIMATABLE (daf_ui_animation_ianimatable_get_type ())
#define DAF_UI_ANIMATION_IANIMATABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_ANIMATION_TYPE_IANIMATABLE, DafUIAnimationIAnimatable))
#define DAF_UI_ANIMATION_IS_IANIMATABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_ANIMATION_TYPE_IANIMATABLE))
#define DAF_UI_ANIMATION_IANIMATABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), DAF_UI_ANIMATION_TYPE_IANIMATABLE, DafUIAnimationIAnimatableIface))

typedef struct _DafUIAnimationIAnimatable DafUIAnimationIAnimatable;
typedef struct _DafUIAnimationIAnimatableIface DafUIAnimationIAnimatableIface;

#define DAF_UI_ANIMATION_TYPE_TIME_LINE (daf_ui_animation_time_line_get_type ())
#define DAF_UI_ANIMATION_TIME_LINE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_ANIMATION_TYPE_TIME_LINE, DafUIAnimationTimeLine))
#define DAF_UI_ANIMATION_TIME_LINE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_ANIMATION_TYPE_TIME_LINE, DafUIAnimationTimeLineClass))
#define DAF_UI_ANIMATION_IS_TIME_LINE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_ANIMATION_TYPE_TIME_LINE))
#define DAF_UI_ANIMATION_IS_TIME_LINE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_ANIMATION_TYPE_TIME_LINE))
#define DAF_UI_ANIMATION_TIME_LINE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_ANIMATION_TYPE_TIME_LINE, DafUIAnimationTimeLineClass))

typedef struct _DafUIAnimationTimeLine DafUIAnimationTimeLine;
typedef struct _DafUIAnimationTimeLineClass DafUIAnimationTimeLineClass;
typedef struct _DafUIAnimationTimeLinePrivate DafUIAnimationTimeLinePrivate;

#define DAF_UI_ANIMATION_TYPE_ANIMATION_MODE (daf_ui_animation_animation_mode_get_type ())

#define DAF_UI_ANIMATION_TYPE_PROPERTY_ANIMATOR (daf_ui_animation_property_animator_get_type ())
#define DAF_UI_ANIMATION_PROPERTY_ANIMATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_ANIMATION_TYPE_PROPERTY_ANIMATOR, DafUIAnimationPropertyAnimator))
#define DAF_UI_ANIMATION_PROPERTY_ANIMATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_ANIMATION_TYPE_PROPERTY_ANIMATOR, DafUIAnimationPropertyAnimatorClass))
#define DAF_UI_ANIMATION_IS_PROPERTY_ANIMATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_ANIMATION_TYPE_PROPERTY_ANIMATOR))
#define DAF_UI_ANIMATION_IS_PROPERTY_ANIMATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_ANIMATION_TYPE_PROPERTY_ANIMATOR))
#define DAF_UI_ANIMATION_PROPERTY_ANIMATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_ANIMATION_TYPE_PROPERTY_ANIMATOR, DafUIAnimationPropertyAnimatorClass))

typedef struct _DafUIAnimationPropertyAnimator DafUIAnimationPropertyAnimator;
typedef struct _DafUIAnimationPropertyAnimatorClass DafUIAnimationPropertyAnimatorClass;
typedef struct _DafUIAnimationPropertyAnimatorPrivate DafUIAnimationPropertyAnimatorPrivate;

#define DAF_UI_ANIMATION_TYPE_KEY_FRAME (daf_ui_animation_key_frame_get_type ())
#define DAF_UI_ANIMATION_KEY_FRAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_ANIMATION_TYPE_KEY_FRAME, DafUIAnimationKeyFrame))
#define DAF_UI_ANIMATION_KEY_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_ANIMATION_TYPE_KEY_FRAME, DafUIAnimationKeyFrameClass))
#define DAF_UI_ANIMATION_IS_KEY_FRAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_ANIMATION_TYPE_KEY_FRAME))
#define DAF_UI_ANIMATION_IS_KEY_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_ANIMATION_TYPE_KEY_FRAME))
#define DAF_UI_ANIMATION_KEY_FRAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_ANIMATION_TYPE_KEY_FRAME, DafUIAnimationKeyFrameClass))

typedef struct _DafUIAnimationKeyFrame DafUIAnimationKeyFrame;
typedef struct _DafUIAnimationKeyFrameClass DafUIAnimationKeyFrameClass;

#define DAF_UI_ANIMATION_TYPE_ANIMATABLE_ADAPTER (daf_ui_animation_animatable_adapter_get_type ())
#define DAF_UI_ANIMATION_ANIMATABLE_ADAPTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_ANIMATION_TYPE_ANIMATABLE_ADAPTER, DafUIAnimationAnimatableAdapter))
#define DAF_UI_ANIMATION_ANIMATABLE_ADAPTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_ANIMATION_TYPE_ANIMATABLE_ADAPTER, DafUIAnimationAnimatableAdapterClass))
#define DAF_UI_ANIMATION_IS_ANIMATABLE_ADAPTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_ANIMATION_TYPE_ANIMATABLE_ADAPTER))
#define DAF_UI_ANIMATION_IS_ANIMATABLE_ADAPTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_ANIMATION_TYPE_ANIMATABLE_ADAPTER))
#define DAF_UI_ANIMATION_ANIMATABLE_ADAPTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_ANIMATION_TYPE_ANIMATABLE_ADAPTER, DafUIAnimationAnimatableAdapterClass))

typedef struct _DafUIAnimationAnimatableAdapter DafUIAnimationAnimatableAdapter;
typedef struct _DafUIAnimationAnimatableAdapterClass DafUIAnimationAnimatableAdapterClass;
typedef struct _DafUIAnimationAnimatableAdapterPrivate DafUIAnimationAnimatableAdapterPrivate;
typedef struct _DafUIAnimationKeyFramePrivate DafUIAnimationKeyFramePrivate;

#define DAF_UI_CORE_TYPE_ABSTRACT_LIST_MODEL (daf_ui_core_abstract_list_model_get_type ())
#define DAF_UI_CORE_ABSTRACT_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_CORE_TYPE_ABSTRACT_LIST_MODEL, DafUICoreAbstractListModel))
#define DAF_UI_CORE_ABSTRACT_LIST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_CORE_TYPE_ABSTRACT_LIST_MODEL, DafUICoreAbstractListModelClass))
#define DAF_UI_CORE_IS_ABSTRACT_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_CORE_TYPE_ABSTRACT_LIST_MODEL))
#define DAF_UI_CORE_IS_ABSTRACT_LIST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_CORE_TYPE_ABSTRACT_LIST_MODEL))
#define DAF_UI_CORE_ABSTRACT_LIST_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_CORE_TYPE_ABSTRACT_LIST_MODEL, DafUICoreAbstractListModelClass))

typedef struct _DafUICoreAbstractListModel DafUICoreAbstractListModel;
typedef struct _DafUICoreAbstractListModelClass DafUICoreAbstractListModelClass;
typedef struct _DafUICoreAbstractListModelPrivate DafUICoreAbstractListModelPrivate;

#define DAF_UI_CORE_TYPE_ABSTRACT_TREE_MODEL (daf_ui_core_abstract_tree_model_get_type ())
#define DAF_UI_CORE_ABSTRACT_TREE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_CORE_TYPE_ABSTRACT_TREE_MODEL, DafUICoreAbstractTreeModel))
#define DAF_UI_CORE_ABSTRACT_TREE_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_CORE_TYPE_ABSTRACT_TREE_MODEL, DafUICoreAbstractTreeModelClass))
#define DAF_UI_CORE_IS_ABSTRACT_TREE_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_CORE_TYPE_ABSTRACT_TREE_MODEL))
#define DAF_UI_CORE_IS_ABSTRACT_TREE_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_CORE_TYPE_ABSTRACT_TREE_MODEL))
#define DAF_UI_CORE_ABSTRACT_TREE_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_CORE_TYPE_ABSTRACT_TREE_MODEL, DafUICoreAbstractTreeModelClass))

typedef struct _DafUICoreAbstractTreeModel DafUICoreAbstractTreeModel;
typedef struct _DafUICoreAbstractTreeModelClass DafUICoreAbstractTreeModelClass;
typedef struct _DafUICoreAbstractTreeModelPrivate DafUICoreAbstractTreeModelPrivate;

#define DAF_UI_WIDGETS_TYPE_IDECK_LAYOUT (daf_ui_widgets_ideck_layout_get_type ())
#define DAF_UI_WIDGETS_IDECK_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_WIDGETS_TYPE_IDECK_LAYOUT, DafUIWidgetsIDeckLayout))
#define DAF_UI_WIDGETS_IS_IDECK_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_WIDGETS_TYPE_IDECK_LAYOUT))
#define DAF_UI_WIDGETS_IDECK_LAYOUT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), DAF_UI_WIDGETS_TYPE_IDECK_LAYOUT, DafUIWidgetsIDeckLayoutIface))

typedef struct _DafUIWidgetsIDeckLayout DafUIWidgetsIDeckLayout;
typedef struct _DafUIWidgetsIDeckLayoutIface DafUIWidgetsIDeckLayoutIface;

#define DAF_UI_WIDGETS_TYPE_ICARD (daf_ui_widgets_icard_get_type ())
#define DAF_UI_WIDGETS_ICARD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_WIDGETS_TYPE_ICARD, DafUIWidgetsICard))
#define DAF_UI_WIDGETS_IS_ICARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_WIDGETS_TYPE_ICARD))
#define DAF_UI_WIDGETS_ICARD_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), DAF_UI_WIDGETS_TYPE_ICARD, DafUIWidgetsICardIface))

typedef struct _DafUIWidgetsICard DafUIWidgetsICard;
typedef struct _DafUIWidgetsICardIface DafUIWidgetsICardIface;

#define DAF_UI_WIDGETS_TYPE_ABSTRACT_DECK_LAYOUT (daf_ui_widgets_abstract_deck_layout_get_type ())
#define DAF_UI_WIDGETS_ABSTRACT_DECK_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_WIDGETS_TYPE_ABSTRACT_DECK_LAYOUT, DafUIWidgetsAbstractDeckLayout))
#define DAF_UI_WIDGETS_ABSTRACT_DECK_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_WIDGETS_TYPE_ABSTRACT_DECK_LAYOUT, DafUIWidgetsAbstractDeckLayoutClass))
#define DAF_UI_WIDGETS_IS_ABSTRACT_DECK_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_WIDGETS_TYPE_ABSTRACT_DECK_LAYOUT))
#define DAF_UI_WIDGETS_IS_ABSTRACT_DECK_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_WIDGETS_TYPE_ABSTRACT_DECK_LAYOUT))
#define DAF_UI_WIDGETS_ABSTRACT_DECK_LAYOUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_WIDGETS_TYPE_ABSTRACT_DECK_LAYOUT, DafUIWidgetsAbstractDeckLayoutClass))

typedef struct _DafUIWidgetsAbstractDeckLayout DafUIWidgetsAbstractDeckLayout;
typedef struct _DafUIWidgetsAbstractDeckLayoutClass DafUIWidgetsAbstractDeckLayoutClass;
typedef struct _DafUIWidgetsAbstractDeckLayoutPrivate DafUIWidgetsAbstractDeckLayoutPrivate;

#define DAF_UI_WIDGETS_TYPE_ANIMATED_DECK_LAYOUT (daf_ui_widgets_animated_deck_layout_get_type ())
#define DAF_UI_WIDGETS_ANIMATED_DECK_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_WIDGETS_TYPE_ANIMATED_DECK_LAYOUT, DafUIWidgetsAnimatedDeckLayout))
#define DAF_UI_WIDGETS_ANIMATED_DECK_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_WIDGETS_TYPE_ANIMATED_DECK_LAYOUT, DafUIWidgetsAnimatedDeckLayoutClass))
#define DAF_UI_WIDGETS_IS_ANIMATED_DECK_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_WIDGETS_TYPE_ANIMATED_DECK_LAYOUT))
#define DAF_UI_WIDGETS_IS_ANIMATED_DECK_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_WIDGETS_TYPE_ANIMATED_DECK_LAYOUT))
#define DAF_UI_WIDGETS_ANIMATED_DECK_LAYOUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_WIDGETS_TYPE_ANIMATED_DECK_LAYOUT, DafUIWidgetsAnimatedDeckLayoutClass))

typedef struct _DafUIWidgetsAnimatedDeckLayout DafUIWidgetsAnimatedDeckLayout;
typedef struct _DafUIWidgetsAnimatedDeckLayoutClass DafUIWidgetsAnimatedDeckLayoutClass;
typedef struct _DafUIWidgetsAnimatedDeckLayoutPrivate DafUIWidgetsAnimatedDeckLayoutPrivate;

#define DAF_UI_WIDGETS_TYPE_ANIMATED_CARD (daf_ui_widgets_animated_card_get_type ())
#define DAF_UI_WIDGETS_ANIMATED_CARD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_WIDGETS_TYPE_ANIMATED_CARD, DafUIWidgetsAnimatedCard))
#define DAF_UI_WIDGETS_ANIMATED_CARD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_WIDGETS_TYPE_ANIMATED_CARD, DafUIWidgetsAnimatedCardClass))
#define DAF_UI_WIDGETS_IS_ANIMATED_CARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_WIDGETS_TYPE_ANIMATED_CARD))
#define DAF_UI_WIDGETS_IS_ANIMATED_CARD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_WIDGETS_TYPE_ANIMATED_CARD))
#define DAF_UI_WIDGETS_ANIMATED_CARD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_WIDGETS_TYPE_ANIMATED_CARD, DafUIWidgetsAnimatedCardClass))

typedef struct _DafUIWidgetsAnimatedCard DafUIWidgetsAnimatedCard;
typedef struct _DafUIWidgetsAnimatedCardClass DafUIWidgetsAnimatedCardClass;
typedef struct _DafUIWidgetsAnimatedCardPrivate DafUIWidgetsAnimatedCardPrivate;

#define DAF_UI_WIDGETS_TYPE_DECK_LAYOUT (daf_ui_widgets_deck_layout_get_type ())
#define DAF_UI_WIDGETS_DECK_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_WIDGETS_TYPE_DECK_LAYOUT, DafUIWidgetsDeckLayout))
#define DAF_UI_WIDGETS_DECK_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_WIDGETS_TYPE_DECK_LAYOUT, DafUIWidgetsDeckLayoutClass))
#define DAF_UI_WIDGETS_IS_DECK_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_WIDGETS_TYPE_DECK_LAYOUT))
#define DAF_UI_WIDGETS_IS_DECK_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_WIDGETS_TYPE_DECK_LAYOUT))
#define DAF_UI_WIDGETS_DECK_LAYOUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_WIDGETS_TYPE_DECK_LAYOUT, DafUIWidgetsDeckLayoutClass))

typedef struct _DafUIWidgetsDeckLayout DafUIWidgetsDeckLayout;
typedef struct _DafUIWidgetsDeckLayoutClass DafUIWidgetsDeckLayoutClass;
typedef struct _DafUIWidgetsDeckLayoutPrivate DafUIWidgetsDeckLayoutPrivate;

#define DAF_UI_WIDGETS_TYPE_CARD (daf_ui_widgets_card_get_type ())
#define DAF_UI_WIDGETS_CARD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UI_WIDGETS_TYPE_CARD, DafUIWidgetsCard))
#define DAF_UI_WIDGETS_CARD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UI_WIDGETS_TYPE_CARD, DafUIWidgetsCardClass))
#define DAF_UI_WIDGETS_IS_CARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UI_WIDGETS_TYPE_CARD))
#define DAF_UI_WIDGETS_IS_CARD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UI_WIDGETS_TYPE_CARD))
#define DAF_UI_WIDGETS_CARD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UI_WIDGETS_TYPE_CARD, DafUIWidgetsCardClass))

typedef struct _DafUIWidgetsCard DafUIWidgetsCard;
typedef struct _DafUIWidgetsCardClass DafUIWidgetsCardClass;
typedef struct _DafUIWidgetsCardPrivate DafUIWidgetsCardPrivate;

struct _DafUIAnimationIAnimatableIface {
	GTypeInterface parent_iface;
	void (*stop) (DafUIAnimationIAnimatable* self);
	void (*start) (DafUIAnimationIAnimatable* self);
};

typedef enum  {
	DAF_UI_ANIMATION_ANIMATION_MODE_LINEAR,
	DAF_UI_ANIMATION_ANIMATION_MODE_EASE_IN_QUAD,
	DAF_UI_ANIMATION_ANIMATION_MODE_EASE_OUT_QUAD,
	DAF_UI_ANIMATION_ANIMATION_MODE_EASE_IN_OUT_QUAD,
	DAF_UI_ANIMATION_ANIMATION_MODE_EASE_IN_CUBIC,
	DAF_UI_ANIMATION_ANIMATION_MODE_EASE_OUT_CUBIC,
	DAF_UI_ANIMATION_ANIMATION_MODE_EASE_IN_OUT_CUBIC,
	DAF_UI_ANIMATION_ANIMATION_MODE_EASE_IN_QUART,
	DAF_UI_ANIMATION_ANIMATION_MODE_EASE_OUT_QUART,
	DAF_UI_ANIMATION_ANIMATION_MODE_EASE_IN_OUT_QUART
} DafUIAnimationAnimationMode;

struct _DafUIAnimationTimeLine {
	GObject parent_instance;
	DafUIAnimationTimeLinePrivate * priv;
	DafUIAnimationAnimationMode mode;
};

struct _DafUIAnimationTimeLineClass {
	GObjectClass parent_class;
	void (*new_frame) (DafUIAnimationTimeLine* self, gdouble progress);
	void (*started) (DafUIAnimationTimeLine* self);
	void (*completed) (DafUIAnimationTimeLine* self);
	void (*before_started) (DafUIAnimationTimeLine* self);
};

typedef void (*DafUIAnimationProgressFunc) (GValue* initial, GValue* final, gdouble progress, GValue* value);
struct _DafUIAnimationPropertyAnimator {
	GObject parent_instance;
	DafUIAnimationPropertyAnimatorPrivate * priv;
	GeeHashMap* properties_map;
};

struct _DafUIAnimationPropertyAnimatorClass {
	GObjectClass parent_class;
};

struct _DafUIAnimationAnimatableAdapter {
	GtkContainer parent_instance;
	DafUIAnimationAnimatableAdapterPrivate * priv;
};

struct _DafUIAnimationAnimatableAdapterClass {
	GtkContainerClass parent_class;
};

struct _DafUIAnimationKeyFrame {
	GTypeInstance parent_instance;
	volatile int ref_count;
	DafUIAnimationKeyFramePrivate * priv;
	gdouble prev_key;
	gdouble key;
	GType type;
	GValue final;
	GValue initial;
};

struct _DafUIAnimationKeyFrameClass {
	GTypeClass parent_class;
	void (*finalize) (DafUIAnimationKeyFrame *self);
};

struct _DafUICoreAbstractListModel {
	DafCoreAbstractValueHolder parent_instance;
	DafUICoreAbstractListModelPrivate * priv;
	gint num_columns;
	gint stamp;
};

struct _DafUICoreAbstractListModelClass {
	DafCoreAbstractValueHolderClass parent_class;
	gboolean (*iter_previous) (DafUICoreAbstractListModel* self, GtkTreeIter* iter);
	void (*ref_node) (DafUICoreAbstractListModel* self, GtkTreeIter* iter);
	void (*unref_node) (DafUICoreAbstractListModel* self, GtkTreeIter* iter);
};

struct _DafUICoreAbstractTreeModel {
	GObject parent_instance;
	DafUICoreAbstractTreeModelPrivate * priv;
	DafCoreIListModel* list_model;
	gint num_columns;
	gint stamp;
};

struct _DafUICoreAbstractTreeModelClass {
	GObjectClass parent_class;
	GType (*get_column_type) (DafUICoreAbstractTreeModel* self, gint index);
	void (*get_value) (DafUICoreAbstractTreeModel* self, GtkTreeIter* iter, gint column, GValue* val);
};

struct _DafUIWidgetsICardIface {
	GTypeInterface parent_iface;
	GtkWidget* (*get_widget) (DafUIWidgetsICard* self);
	void (*set_widget) (DafUIWidgetsICard* self, GtkWidget* value);
	gboolean (*get_visible) (DafUIWidgetsICard* self);
	void (*set_visible) (DafUIWidgetsICard* self, gboolean value);
	GtkAlign (*get_halign) (DafUIWidgetsICard* self);
	void (*set_halign) (DafUIWidgetsICard* self, GtkAlign value);
	GtkAlign (*get_valign) (DafUIWidgetsICard* self);
	void (*set_valign) (DafUIWidgetsICard* self, GtkAlign value);
	gboolean (*get_hexpand) (DafUIWidgetsICard* self);
	void (*set_hexpand) (DafUIWidgetsICard* self, gboolean value);
	gboolean (*get_vexpand) (DafUIWidgetsICard* self);
	void (*set_vexpand) (DafUIWidgetsICard* self, gboolean value);
};

struct _DafUIWidgetsIDeckLayoutIface {
	GTypeInterface parent_iface;
	void (*add) (DafUIWidgetsIDeckLayout* self, GtkWidget* widget);
	void (*remove) (DafUIWidgetsIDeckLayout* self, GtkWidget* widget);
	gboolean (*switch_widget) (DafUIWidgetsIDeckLayout* self, GtkWidget* widget, gboolean quiet);
	gboolean (*do_switch) (DafUIWidgetsIDeckLayout* self, DafUIWidgetsICard* card, gboolean quiet);
	DafUIWidgetsICard* (*create_card) (DafUIWidgetsIDeckLayout* self, GtkWidget* widget);
};

struct _DafUIWidgetsAbstractDeckLayout {
	GtkContainer parent_instance;
	DafUIWidgetsAbstractDeckLayoutPrivate * priv;
};

struct _DafUIWidgetsAbstractDeckLayoutClass {
	GtkContainerClass parent_class;
	gboolean (*do_switch) (DafUIWidgetsAbstractDeckLayout* self, DafUIWidgetsICard* to_card, gboolean quiet);
	DafUIWidgetsICard* (*create_card) (DafUIWidgetsAbstractDeckLayout* self, GtkWidget* widget);
	void (*compute_width) (DafUIWidgetsAbstractDeckLayout* self, DafUIWidgetsICard* card, gint* minimum, gint* natural);
	void (*compute_height) (DafUIWidgetsAbstractDeckLayout* self, DafUIWidgetsICard* card, gint* minimum, gint* natural);
};

struct _DafUIWidgetsAnimatedDeckLayout {
	DafUIWidgetsAbstractDeckLayout parent_instance;
	DafUIWidgetsAnimatedDeckLayoutPrivate * priv;
};

struct _DafUIWidgetsAnimatedDeckLayoutClass {
	DafUIWidgetsAbstractDeckLayoutClass parent_class;
};

struct _DafUIWidgetsAnimatedCard {
	GObject parent_instance;
	DafUIWidgetsAnimatedCardPrivate * priv;
	gint width_request;
	gint height_request;
	gint width;
	gint height;
	gdouble opacity;
};

struct _DafUIWidgetsAnimatedCardClass {
	GObjectClass parent_class;
};

struct _DafUIWidgetsDeckLayout {
	DafUIWidgetsAbstractDeckLayout parent_instance;
	DafUIWidgetsDeckLayoutPrivate * priv;
};

struct _DafUIWidgetsDeckLayoutClass {
	DafUIWidgetsAbstractDeckLayoutClass parent_class;
};

struct _DafUIWidgetsCard {
	GObject parent_instance;
	DafUIWidgetsCardPrivate * priv;
};

struct _DafUIWidgetsCardClass {
	GObjectClass parent_class;
};


GType daf_ui_animation_ianimatable_get_type (void) G_GNUC_CONST;
GType daf_ui_animation_time_line_get_type (void) G_GNUC_CONST;
GType daf_ui_animation_animation_mode_get_type (void) G_GNUC_CONST;
DafUIAnimationTimeLine* daf_ui_animation_time_line_new (DafUIAnimationAnimationMode mode);
DafUIAnimationTimeLine* daf_ui_animation_time_line_construct (GType object_type,
                                                              DafUIAnimationAnimationMode mode);
DafUIAnimationTimeLine* daf_ui_animation_time_line_new_full (DafUIAnimationAnimationMode mode,
                                                             guint duration,
                                                             guint fps);
DafUIAnimationTimeLine* daf_ui_animation_time_line_construct_full (GType object_type,
                                                                   DafUIAnimationAnimationMode mode,
                                                                   guint duration,
                                                                   guint fps);
gboolean daf_ui_animation_time_line_do_frame (DafUIAnimationTimeLine* self);
guint daf_ui_animation_time_line_get_fps (DafUIAnimationTimeLine* self);
void daf_ui_animation_time_line_set_fps (DafUIAnimationTimeLine* self,
                                         guint value);
guint64 daf_ui_animation_time_line_get_duration (DafUIAnimationTimeLine* self);
void daf_ui_animation_time_line_set_duration (DafUIAnimationTimeLine* self,
                                              guint64 value);
gboolean daf_ui_animation_time_line_get_playing (DafUIAnimationTimeLine* self);
void daf_ui_animation_ianimatable_stop (DafUIAnimationIAnimatable* self);
void daf_ui_animation_ianimatable_start (DafUIAnimationIAnimatable* self);
gdouble daf_ui_animation_animation_mode_easing_func (DafUIAnimationAnimationMode self,
                                                     guint64 elapsed,
                                                     guint64 duration);
GType daf_ui_animation_property_animator_get_type (void) G_GNUC_CONST;
gpointer daf_ui_animation_key_frame_ref (gpointer instance);
void daf_ui_animation_key_frame_unref (gpointer instance);
GParamSpec* daf_ui_animation_param_spec_key_frame (const gchar* name,
                                                   const gchar* nick,
                                                   const gchar* blurb,
                                                   GType object_type,
                                                   GParamFlags flags);
void daf_ui_animation_value_set_key_frame (GValue* value,
                                           gpointer v_object);
void daf_ui_animation_value_take_key_frame (GValue* value,
                                            gpointer v_object);
gpointer daf_ui_animation_value_get_key_frame (const GValue* value);
GType daf_ui_animation_key_frame_get_type (void) G_GNUC_CONST;
gboolean daf_ui_animation_property_animator_has_proprety (DafUIAnimationPropertyAnimator* self);
DafUIAnimationPropertyAnimator* daf_ui_animation_property_animator_animate (GObject* object,
                                                                            DafUIAnimationAnimationMode mode,
                                                                            gint duration,
                                                                            ...);
DafUIAnimationPropertyAnimator* daf_ui_animation_property_animator_animate_with_timeline (GObject* object,
                                                                                          DafUIAnimationTimeLine* timeline,
                                                                                          ...);
void daf_ui_animation_property_animator_remove_keyframe (DafUIAnimationPropertyAnimator* self,
                                                         gdouble key,
                                                         const gchar* property);
void daf_ui_animation_property_animator_set_keyframe (DafUIAnimationPropertyAnimator* self,
                                                      gdouble key,
                                                      const gchar* property,
                                                      GValue* final);
void daf_ui_animation_property_animator_on_new_frame (DafUIAnimationPropertyAnimator* self,
                                                      gdouble progress);
DafUIAnimationTimeLine* daf_ui_animation_property_animator_get_timeline (DafUIAnimationPropertyAnimator* self);
void daf_ui_animation_property_animator_set_timeline (DafUIAnimationPropertyAnimator* self,
                                                      DafUIAnimationTimeLine* value);
GType daf_ui_animation_animatable_adapter_get_type (void) G_GNUC_CONST;
DafUIAnimationAnimatableAdapter* daf_ui_animation_animatable_adapter_new (GtkWidget* child);
DafUIAnimationAnimatableAdapter* daf_ui_animation_animatable_adapter_construct (GType object_type,
                                                                                GtkWidget* child);
GdkWindow* daf_ui_animation_animatable_adapter_on_pick_embedded_child (DafUIAnimationAnimatableAdapter* self,
                                                                       gdouble x,
                                                                       gdouble y);
void daf_ui_animation_animatable_adapter_on_embedder_event (DafUIAnimationAnimatableAdapter* self,
                                                            gdouble x,
                                                            gdouble y,
                                                            gdouble* x1,
                                                            gdouble* y1);
void daf_ui_animation_animatable_adapter_print_alloc (DafUIAnimationAnimatableAdapter* self,
                                                      GtkWidget* w,
                                                      const gchar* msg,
                                                      GtkAllocation* a);
gdouble daf_ui_animation_animatable_adapter_get_opacity (DafUIAnimationAnimatableAdapter* self);
void daf_ui_animation_animatable_adapter_set_opacity (DafUIAnimationAnimatableAdapter* self,
                                                      gdouble value);
gint daf_ui_animation_animatable_adapter_get_offset_x (DafUIAnimationAnimatableAdapter* self);
void daf_ui_animation_animatable_adapter_set_offset_x (DafUIAnimationAnimatableAdapter* self,
                                                       gint value);
gint daf_ui_animation_animatable_adapter_get_offset_y (DafUIAnimationAnimatableAdapter* self);
void daf_ui_animation_animatable_adapter_set_offset_y (DafUIAnimationAnimatableAdapter* self,
                                                       gint value);
GtkWidget* daf_ui_animation_animatable_adapter_get_child (DafUIAnimationAnimatableAdapter* self);
DafUIAnimationKeyFrame* daf_ui_animation_key_frame_new (gdouble key,
                                                        gdouble prev_key,
                                                        GType type,
                                                        GValue* initial,
                                                        GValue* final);
DafUIAnimationKeyFrame* daf_ui_animation_key_frame_construct (GType object_type,
                                                              gdouble key,
                                                              gdouble prev_key,
                                                              GType type,
                                                              GValue* initial,
                                                              GValue* final);
GType daf_ui_core_abstract_list_model_get_type (void) G_GNUC_CONST;
DafUICoreAbstractListModel* daf_ui_core_abstract_list_model_new (GType g_type,
                                                                 GBoxedCopyFunc g_dup_func,
                                                                 GDestroyNotify g_destroy_func,
                                                                 DafCoreArrayListModel* array_list);
DafUICoreAbstractListModel* daf_ui_core_abstract_list_model_construct (GType object_type,
                                                                       GType g_type,
                                                                       GBoxedCopyFunc g_dup_func,
                                                                       GDestroyNotify g_destroy_func,
                                                                       DafCoreArrayListModel* array_list);
gboolean daf_ui_core_abstract_list_model_get_iter_first (DafUICoreAbstractListModel* self,
                                                         GtkTreeIter* iter);
gboolean daf_ui_core_abstract_list_model_get_iter_from_string (DafUICoreAbstractListModel* self,
                                                               GtkTreeIter* iter,
                                                               const gchar* path_string);
gchar* daf_ui_core_abstract_list_model_get_string_from_iter (DafUICoreAbstractListModel* self,
                                                             GtkTreeIter* iter);
gboolean daf_ui_core_abstract_list_model_iter_previous (DafUICoreAbstractListModel* self,
                                                        GtkTreeIter* iter);
void daf_ui_core_abstract_list_model_ref_node (DafUICoreAbstractListModel* self,
                                               GtkTreeIter* iter);
void daf_ui_core_abstract_list_model_unref_node (DafUICoreAbstractListModel* self,
                                                 GtkTreeIter* iter);
void daf_ui_core_abstract_list_model_foreach (DafUICoreAbstractListModel* self,
                                              GtkTreeModelForeachFunc func,
                                              gpointer func_target);
void daf_ui_core_abstract_list_model_get (DafUICoreAbstractListModel* self,
                                          GtkTreeIter* iter,
                                          ...);
void daf_ui_core_abstract_list_model_get_valist (DafUICoreAbstractListModel* self,
                                                 GtkTreeIter* iter,
                                                 void* var_args);
GType daf_ui_core_abstract_tree_model_get_type (void) G_GNUC_CONST;
DafUICoreAbstractTreeModel* daf_ui_core_abstract_tree_model_construct (GType object_type,
                                                                       GType g_type,
                                                                       GBoxedCopyFunc g_dup_func,
                                                                       GDestroyNotify g_destroy_func,
                                                                       DafCoreIListModel* list_model,
                                                                       gint num_columns);
gboolean daf_ui_core_abstract_tree_model_check_iter (DafUICoreAbstractTreeModel* self,
                                                     GtkTreeIter* iter);
GType daf_ui_core_abstract_tree_model_get_column_type (DafUICoreAbstractTreeModel* self,
                                                       gint index);
void daf_ui_core_abstract_tree_model_get_value (DafUICoreAbstractTreeModel* self,
                                                GtkTreeIter* iter,
                                                gint column,
                                                GValue* val);
void daf_ui_core_abstract_tree_model_on_tree_selection_changed (DafUICoreAbstractTreeModel* self,
                                                                GtkTreeSelection* selection);
void daf_ui_core_abstract_tree_model_on_item_removed (DafUICoreAbstractTreeModel* self,
                                                      gint index);
void daf_ui_core_abstract_tree_model_on_item_added (DafUICoreAbstractTreeModel* self,
                                                    gint index);
void daf_ui_core_abstract_tree_model_on_list_changed (DafUICoreAbstractTreeModel* self,
                                                      gint size);
void daf_ui_core_abstract_tree_model_on_item_changed (DafUICoreAbstractTreeModel* self,
                                                      gint index,
                                                      gconstpointer item);
void daf_ui_core_abstract_tree_model_on_selection_changed (DafUICoreAbstractTreeModel* self,
                                                           GObject* sender,
                                                           GParamSpec* param_spec);
GtkTreeSelection* daf_ui_core_abstract_tree_model_get_tree_selection (DafUICoreAbstractTreeModel* self);
void daf_ui_core_abstract_tree_model_set_tree_selection (DafUICoreAbstractTreeModel* self,
                                                         GtkTreeSelection* value);
GType daf_ui_widgets_icard_get_type (void) G_GNUC_CONST;
GType daf_ui_widgets_ideck_layout_get_type (void) G_GNUC_CONST;
GType daf_ui_widgets_abstract_deck_layout_get_type (void) G_GNUC_CONST;
GType daf_ui_widgets_animated_deck_layout_get_type (void) G_GNUC_CONST;
DafUIWidgetsAnimatedDeckLayout* daf_ui_widgets_animated_deck_layout_new (void);
DafUIWidgetsAnimatedDeckLayout* daf_ui_widgets_animated_deck_layout_construct (GType object_type);
DafUIWidgetsAnimatedDeckLayout* daf_ui_widgets_animated_deck_layout_new_with_timeline (DafUIAnimationTimeLine* timeline);
DafUIWidgetsAnimatedDeckLayout* daf_ui_widgets_animated_deck_layout_construct_with_timeline (GType object_type,
                                                                                             DafUIAnimationTimeLine* timeline);
void daf_ui_widgets_animated_deck_layout_on_animation_completed (DafUIWidgetsAnimatedDeckLayout* self,
                                                                 GObject* object);
void daf_ui_widgets_animated_deck_layout_save_state (DafUIWidgetsAnimatedDeckLayout* self,
                                                     DafUIWidgetsICard* card);
gboolean daf_ui_widgets_animated_deck_layout_get_state (DafUIWidgetsAnimatedDeckLayout* self,
                                                        DafUIWidgetsICard* card,
                                                        gint* width,
                                                        gint* height);
DafUIAnimationTimeLine* daf_ui_widgets_animated_deck_layout_get_timeline (DafUIWidgetsAnimatedDeckLayout* self);
void daf_ui_widgets_animated_deck_layout_set_timeline (DafUIWidgetsAnimatedDeckLayout* self,
                                                       DafUIAnimationTimeLine* value);
GType daf_ui_widgets_animated_card_get_type (void) G_GNUC_CONST;
DafUIWidgetsAnimatedCard* daf_ui_widgets_animated_card_new (GtkWidget* widget);
DafUIWidgetsAnimatedCard* daf_ui_widgets_animated_card_construct (GType object_type,
                                                                  GtkWidget* widget);
GtkWidget* daf_ui_widgets_animated_card_get_focus_child (DafUIWidgetsAnimatedCard* self);
void daf_ui_widgets_animated_card_set_focus_child (DafUIWidgetsAnimatedCard* self,
                                                   GtkWidget* value);
GType daf_ui_widgets_deck_layout_get_type (void) G_GNUC_CONST;
DafUIWidgetsDeckLayout* daf_ui_widgets_deck_layout_new (void);
DafUIWidgetsDeckLayout* daf_ui_widgets_deck_layout_construct (GType object_type);
DafUIWidgetsAbstractDeckLayout* daf_ui_widgets_abstract_deck_layout_construct (GType object_type);
DafUIWidgetsAbstractDeckLayout* daf_ui_widgets_abstract_deck_layout_construct_with_cards (GType object_type,
                                                                                          GList* cards);
DafUIWidgetsICard* daf_ui_widgets_abstract_deck_layout_get_card_of_widget (DafUIWidgetsAbstractDeckLayout* self,
                                                                           GtkWidget* widget);
void daf_ui_widgets_abstract_deck_layout_switch_next (DafUIWidgetsAbstractDeckLayout* self,
                                                      gboolean quiet);
gboolean daf_ui_widgets_abstract_deck_layout_do_switch (DafUIWidgetsAbstractDeckLayout* self,
                                                        DafUIWidgetsICard* to_card,
                                                        gboolean quiet);
DafUIWidgetsICard* daf_ui_widgets_abstract_deck_layout_create_card (DafUIWidgetsAbstractDeckLayout* self,
                                                                    GtkWidget* widget);
void daf_ui_widgets_abstract_deck_layout_compute_width (DafUIWidgetsAbstractDeckLayout* self,
                                                        DafUIWidgetsICard* card,
                                                        gint* minimum,
                                                        gint* natural);
void daf_ui_widgets_abstract_deck_layout_compute_height (DafUIWidgetsAbstractDeckLayout* self,
                                                         DafUIWidgetsICard* card,
                                                         gint* minimum,
                                                         gint* natural);
void daf_ui_widgets_abstract_deck_layout_print_alloc (DafUIWidgetsAbstractDeckLayout* self,
                                                      GtkWidget* w,
                                                      GtkAllocation* a);
guint daf_ui_widgets_abstract_deck_layout_get_size (DafUIWidgetsAbstractDeckLayout* self);
GtkWidget* daf_ui_widgets_abstract_deck_layout_get_active_widget (DafUIWidgetsAbstractDeckLayout* self);
DafUIWidgetsICard* daf_ui_widgets_abstract_deck_layout_get_active_card (DafUIWidgetsAbstractDeckLayout* self);
void daf_ui_widgets_abstract_deck_layout_set_active_card (DafUIWidgetsAbstractDeckLayout* self,
                                                          DafUIWidgetsICard* value);
GType daf_ui_widgets_card_get_type (void) G_GNUC_CONST;
DafUIWidgetsCard* daf_ui_widgets_card_new (GtkWidget* widget);
DafUIWidgetsCard* daf_ui_widgets_card_construct (GType object_type,
                                                 GtkWidget* widget);
GtkWidget* daf_ui_widgets_card_get_focus_child (DafUIWidgetsCard* self);
void daf_ui_widgets_card_set_focus_child (DafUIWidgetsCard* self,
                                          GtkWidget* value);
GtkWidget* daf_ui_widgets_icard_get_widget (DafUIWidgetsICard* self);
void daf_ui_widgets_icard_set_widget (DafUIWidgetsICard* self,
                                      GtkWidget* value);
gboolean daf_ui_widgets_icard_get_visible (DafUIWidgetsICard* self);
void daf_ui_widgets_icard_set_visible (DafUIWidgetsICard* self,
                                       gboolean value);
GtkAlign daf_ui_widgets_icard_get_halign (DafUIWidgetsICard* self);
void daf_ui_widgets_icard_set_halign (DafUIWidgetsICard* self,
                                      GtkAlign value);
GtkAlign daf_ui_widgets_icard_get_valign (DafUIWidgetsICard* self);
void daf_ui_widgets_icard_set_valign (DafUIWidgetsICard* self,
                                      GtkAlign value);
gboolean daf_ui_widgets_icard_get_hexpand (DafUIWidgetsICard* self);
void daf_ui_widgets_icard_set_hexpand (DafUIWidgetsICard* self,
                                       gboolean value);
gboolean daf_ui_widgets_icard_get_vexpand (DafUIWidgetsICard* self);
void daf_ui_widgets_icard_set_vexpand (DafUIWidgetsICard* self,
                                       gboolean value);
void daf_ui_widgets_ideck_layout_add (DafUIWidgetsIDeckLayout* self,
                                      GtkWidget* widget);
void daf_ui_widgets_ideck_layout_remove (DafUIWidgetsIDeckLayout* self,
                                         GtkWidget* widget);
gboolean daf_ui_widgets_ideck_layout_switch_widget (DafUIWidgetsIDeckLayout* self,
                                                    GtkWidget* widget,
                                                    gboolean quiet);
gboolean daf_ui_widgets_ideck_layout_do_switch (DafUIWidgetsIDeckLayout* self,
                                                DafUIWidgetsICard* card,
                                                gboolean quiet);
DafUIWidgetsICard* daf_ui_widgets_ideck_layout_create_card (DafUIWidgetsIDeckLayout* self,
                                                            GtkWidget* widget);


G_END_DECLS

#endif
