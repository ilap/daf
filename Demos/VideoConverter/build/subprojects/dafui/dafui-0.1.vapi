/* dafui-0.1.vapi generated by valac 0.40.10, do not modify. */

namespace Daf {
	namespace UI {
		namespace Animation {
			[CCode (cheader_filename = "dafui.h")]
			public class AnimatableAdapter : Gtk.Container {
				public AnimatableAdapter (Gtk.Widget child);
				public override void add (Gtk.Widget widget);
				public override bool damage_event (Gdk.EventExpose expose);
				public override bool draw (Cairo.Context cr);
				public override void forall_internal (bool include_internal, Gtk.Callback callback);
				public void on_embedder_event (double x, double y, out double x1, out double y1);
				public unowned Gdk.Window on_pick_embedded_child (double x, double y);
				public void print_alloc (Gtk.Widget w, string msg, Gtk.Allocation a);
				public override void realize ();
				public override void remove (Gtk.Widget widget);
				public override void size_allocate (Gtk.Allocation alloc);
				public override void unrealize ();
				public Gtk.Widget? child { get; private set; }
				public int offset_x { get; set; }
				public int offset_y { get; set; }
				public double opacity { get; set; }
			}
			[CCode (cheader_filename = "dafui.h")]
			public class KeyFrame {
				public GLib.Value final;
				public GLib.Value initial;
				public double key;
				public double prev_key;
				public GLib.Type type;
				public KeyFrame (double key, double prev_key, GLib.Type type, GLib.Value initial, GLib.Value final);
			}
			[CCode (cheader_filename = "dafui.h")]
			public class PropertyAnimator : GLib.Object {
				public Gee.HashMap<string,Gee.ArrayList<Daf.UI.Animation.KeyFrame>> properties_map;
				public static Daf.UI.Animation.PropertyAnimator animate (GLib.Object object, Daf.UI.Animation.AnimationMode mode, int duration, ...);
				public static Daf.UI.Animation.PropertyAnimator animate_with_timeline (GLib.Object object, Daf.UI.Animation.TimeLine timeline, ...);
				public bool has_proprety ();
				public void on_new_frame (double progress);
				public void remove_keyframe (double key, string property);
				public void set_keyframe (double key, string property, GLib.Value final);
				public Daf.UI.Animation.TimeLine? timeline { get; set; }
				public signal void completed ();
				public signal void on_keyframe (string prope_name, double key);
				public signal void started ();
			}
			[CCode (cheader_filename = "dafui.h")]
			public class TimeLine : GLib.Object, Daf.UI.Animation.IAnimatable {
				public Daf.UI.Animation.AnimationMode mode;
				public TimeLine (Daf.UI.Animation.AnimationMode mode);
				public bool do_frame ();
				public TimeLine.full (Daf.UI.Animation.AnimationMode mode, uint duration, uint fps = 25);
				public uint64 duration { get; set; }
				public uint fps { get; set; }
				public bool playing { get; private set; }
				public virtual signal void before_started ();
				public virtual signal void completed ();
				public virtual signal void new_frame (double progress);
				public virtual signal void started ();
			}
			[CCode (cheader_filename = "dafui.h")]
			public interface IAnimatable {
				public abstract void start ();
				public abstract void stop ();
			}
			[CCode (cheader_filename = "dafui.h")]
			public enum AnimationMode {
				LINEAR,
				EASE_IN_QUAD,
				EASE_OUT_QUAD,
				EASE_IN_OUT_QUAD,
				EASE_IN_CUBIC,
				EASE_OUT_CUBIC,
				EASE_IN_OUT_CUBIC,
				EASE_IN_QUART,
				EASE_OUT_QUART,
				EASE_IN_OUT_QUART;
				public double easing_func (uint64 elapsed, uint64 duration);
			}
			[CCode (cheader_filename = "dafui.h", has_target = false)]
			public delegate void ProgressFunc (GLib.Value initial, GLib.Value final, double progress, ref GLib.Value value);
		}
		namespace Core {
			[CCode (cheader_filename = "dafui.h")]
			public class AbstractListModel<G> : Daf.Core.AbstractValueHolder, Gtk.TreeModel {
				protected int num_columns;
				protected int stamp;
				public AbstractListModel (Daf.Core.ArrayListModel<G> array_list);
				public void @foreach (Gtk.TreeModelForeachFunc func);
				public new void @get (Gtk.TreeIter iter, ...);
				public bool get_iter_first (out Gtk.TreeIter iter);
				public bool get_iter_from_string (out Gtk.TreeIter iter, string path_string);
				public string get_string_from_iter (Gtk.TreeIter iter);
				public void get_valist (Gtk.TreeIter iter, void* var_args);
				public virtual bool iter_previous (ref Gtk.TreeIter iter);
				public virtual void ref_node (Gtk.TreeIter iter);
				public virtual void unref_node (Gtk.TreeIter iter);
			}
			[CCode (cheader_filename = "dafui.h")]
			public abstract class AbstractTreeModel<G> : GLib.Object, Gtk.TreeModel {
				public Daf.Core.IListModel<G> list_model;
				protected int num_columns;
				protected int stamp;
				public AbstractTreeModel (Daf.Core.IListModel list_model, int num_columns);
				public bool check_iter (Gtk.TreeIter iter);
				public abstract GLib.Type get_column_type (int index);
				public abstract void get_value (Gtk.TreeIter iter, int column, out GLib.Value val);
				public void on_item_added (int index);
				public void on_item_changed (int index, G item);
				public void on_item_removed (int index);
				public void on_list_changed (int size);
				public void on_selection_changed (GLib.Object sender, GLib.ParamSpec param_spec);
				public void on_tree_selection_changed (Gtk.TreeSelection selection);
				public Gtk.TreeSelection tree_selection { get; set; }
			}
		}
		namespace Widgets {
			[CCode (cheader_filename = "dafui.h")]
			public abstract class AbstractDeckLayout : Gtk.Container, Daf.UI.Widgets.IDeckLayout {
				public AbstractDeckLayout ();
				protected abstract void compute_height (Daf.UI.Widgets.ICard card, out int minimum, out int natural);
				protected abstract void compute_width (Daf.UI.Widgets.ICard card, out int minimum, out int natural);
				protected abstract Daf.UI.Widgets.ICard create_card (Gtk.Widget widget);
				protected abstract bool do_switch (Daf.UI.Widgets.ICard? to_card, bool quiet = true);
				public override bool draw (Cairo.Context cr);
				public override void forall_internal (bool include_internal, Gtk.Callback callback);
				protected Daf.UI.Widgets.ICard? get_card_of_widget (Gtk.Widget? widget);
				public override void get_preferred_height (out int minimum, out int natural);
				public override void get_preferred_width (out int minimum, out int natural);
				public void print_alloc (Gtk.Widget w, Gtk.Allocation a);
				public override void size_allocate (Gtk.Allocation alloc);
				public void switch_next (bool quiet = false);
				public AbstractDeckLayout.with_cards (GLib.List<Daf.UI.Widgets.ICard> cards);
				public Daf.UI.Widgets.ICard? active_card { get; set; }
				public Gtk.Widget? active_widget { get; private set; }
				public uint size { get; }
			}
			[CCode (cheader_filename = "dafui.h")]
			public class AnimatedCard : GLib.Object, Daf.UI.Widgets.ICard {
				public int height;
				public int height_request;
				public double opacity;
				public int width;
				public int width_request;
				public AnimatedCard (Gtk.Widget widget);
				public Gtk.Widget? focus_child { get; set; }
			}
			[CCode (cheader_filename = "dafui.h")]
			public class AnimatedDeckLayout : Daf.UI.Widgets.AbstractDeckLayout {
				public AnimatedDeckLayout ();
				public override void add (Gtk.Widget widget);
				protected override void compute_height (Daf.UI.Widgets.ICard card, out int minimum, out int natural);
				protected override void compute_width (Daf.UI.Widgets.ICard card, out int minimum, out int natural);
				protected override Daf.UI.Widgets.ICard create_card (Gtk.Widget widget);
				protected override bool do_switch (Daf.UI.Widgets.ICard? to_card, bool quiet = true);
				protected bool get_state (Daf.UI.Widgets.ICard card, out int width, out int height);
				public void on_animation_completed (GLib.Object object);
				protected void save_state (Daf.UI.Widgets.ICard card);
				public AnimatedDeckLayout.with_timeline (Daf.UI.Animation.TimeLine timeline);
				public Daf.UI.Animation.TimeLine timeline { get; set construct; }
			}
			[CCode (cheader_filename = "dafui.h")]
			public class Card : GLib.Object, Daf.UI.Widgets.ICard {
				public Card (Gtk.Widget widget);
				public Gtk.Widget? focus_child { get; set; }
			}
			[CCode (cheader_filename = "dafui.h")]
			public class DeckLayout : Daf.UI.Widgets.AbstractDeckLayout {
				public DeckLayout ();
				protected override void compute_height (Daf.UI.Widgets.ICard card, out int minimum, out int natural);
				protected override void compute_width (Daf.UI.Widgets.ICard card, out int minimum, out int natural);
				protected override Daf.UI.Widgets.ICard create_card (Gtk.Widget widget);
				protected override bool do_switch (Daf.UI.Widgets.ICard? to_card, bool quiet = true);
			}
			[CCode (cheader_filename = "dafui.h")]
			public interface ICard : GLib.Object {
				public abstract Gtk.Align halign { get; set; }
				public abstract bool hexpand { get; set; }
				public abstract Gtk.Align valign { get; set; }
				public abstract bool vexpand { get; set; }
				public abstract bool visible { get; set; }
				public abstract Gtk.Widget? widget { get; set; }
			}
			[CCode (cheader_filename = "dafui.h")]
			public interface IDeckLayout : Gtk.Container {
				public abstract void add (Gtk.Widget widget);
				protected abstract Daf.UI.Widgets.ICard create_card (Gtk.Widget widget);
				public abstract bool do_switch (Daf.UI.Widgets.ICard? card, bool quiet = true);
				public abstract void remove (Gtk.Widget widget);
				public abstract bool switch_widget (Gtk.Widget? widget, bool quiet = false);
			}
		}
	}
}
