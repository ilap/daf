/* dafunit-0.1.vapi generated by valac 0.40.10, do not modify. */

namespace Daf {
	[CCode (gir_namespace = "DaF.UnitTest", gir_version = "1.2")]
	namespace UnitTest {
		[CCode (cheader_filename = "dafunit.h")]
		public abstract class AbstractTestCase : GLib.Object {
			public delegate void TestMethod ();
			public AbstractTestCase (string name);
			public void add_async_test (string name, Daf.UnitTest.AsyncBegin async_begin, Daf.UnitTest.AsyncFinish async_finish, int timeout = 200);
			public void add_test (string name, Daf.UnitTest.AbstractTestCase.TestMethod test);
			public GLib.TestSuite get_suite ();
			public virtual void set_up ();
			public virtual void tear_down ();
		}
		[CCode (cheader_filename = "dafunit.h")]
		public class Assert : GLib.Object {
			public Assert ();
			public static void are_equal<T> (T expected, T actual, string debug = "") throws Daf.UnitTest.AssertError;
			public static void are_not_equal<T> (T not_expected, T actual, string debug = "") throws Daf.UnitTest.AssertError;
			public static void fail (string debug) throws Daf.UnitTest.AssertError;
			public static void is_false (bool actual, string debug = "") throws Daf.UnitTest.AssertError;
			public static void is_true (bool actual, string debug = "") throws Daf.UnitTest.AssertError;
			public static void should_throw_async (Daf.UnitTest.AsyncBegin fbegin, Daf.UnitTest.AsyncFinish ffinish, string domain, string debug = "") throws Daf.UnitTest.AssertError;
		}
		[CCode (cheader_filename = "dafunit.h")]
		public class MultiSignalWaiter : GLib.Object {
			public MultiSignalWaiter ();
			public void add_signal (GLib.Object emitter, string signame, int timeout = 200);
			public bool run (Daf.UnitTest.Block block, int timeout = 200);
		}
		[CCode (cheader_filename = "dafunit.h")]
		public errordomain AssertError {
			UNEXPECTED_VALUE,
			UNEXPECTED_STATE
		}
		[CCode (cheader_filename = "dafunit.h")]
		public delegate void AsyncBegin (GLib.AsyncReadyCallback callback);
		[CCode (cheader_filename = "dafunit.h")]
		public delegate void AsyncFinish (GLib.AsyncResult result) throws GLib.Error;
		[CCode (cheader_filename = "dafunit.h")]
		public delegate void Block ();
		[CCode (cheader_filename = "dafunit.h")]
		public delegate void CancelableAsyncBegin (GLib.Cancellable cancel, GLib.AsyncReadyCallback callback);
		[CCode (cheader_filename = "dafunit.h")]
		public delegate bool Predicate ();
		[CCode (cheader_filename = "dafunit.h")]
		public static bool wait_for_async (int timeout, Daf.UnitTest.AsyncBegin async_function, Daf.UnitTest.AsyncFinish async_finish) throws GLib.Error;
		[CCode (cheader_filename = "dafunit.h")]
		public static bool wait_for_cancellable_async (int timeout, Daf.UnitTest.CancelableAsyncBegin async_function, Daf.UnitTest.AsyncFinish async_finish) throws GLib.Error;
		[CCode (cheader_filename = "dafunit.h")]
		public static bool wait_for_condition (int timeout, GLib.Object emitter, string signame, owned Daf.UnitTest.Predicate predicate, Daf.UnitTest.Block block);
		[CCode (cheader_filename = "dafunit.h")]
		public static bool wait_for_signal (int timeout, GLib.Object emitter, string signame, Daf.UnitTest.Block block);
	}
}
