/* dafunit.h generated by valac 0.40.10, the Vala compiler, do not modify */


#ifndef __SUBPROJECTS_DAFUNIT_DAFUNIT_H__
#define __SUBPROJECTS_DAFUNIT_DAFUNIT_H__

#include <glib.h>
#include <gio/gio.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define DAF_UNIT_TEST_TYPE_MULTI_SIGNAL_WAITER (daf_unit_test_multi_signal_waiter_get_type ())
#define DAF_UNIT_TEST_MULTI_SIGNAL_WAITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UNIT_TEST_TYPE_MULTI_SIGNAL_WAITER, DafUnitTestMultiSignalWaiter))
#define DAF_UNIT_TEST_MULTI_SIGNAL_WAITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UNIT_TEST_TYPE_MULTI_SIGNAL_WAITER, DafUnitTestMultiSignalWaiterClass))
#define DAF_UNIT_TEST_IS_MULTI_SIGNAL_WAITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UNIT_TEST_TYPE_MULTI_SIGNAL_WAITER))
#define DAF_UNIT_TEST_IS_MULTI_SIGNAL_WAITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UNIT_TEST_TYPE_MULTI_SIGNAL_WAITER))
#define DAF_UNIT_TEST_MULTI_SIGNAL_WAITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UNIT_TEST_TYPE_MULTI_SIGNAL_WAITER, DafUnitTestMultiSignalWaiterClass))

typedef struct _DafUnitTestMultiSignalWaiter DafUnitTestMultiSignalWaiter;
typedef struct _DafUnitTestMultiSignalWaiterClass DafUnitTestMultiSignalWaiterClass;
typedef struct _DafUnitTestMultiSignalWaiterPrivate DafUnitTestMultiSignalWaiterPrivate;

#define DAF_UNIT_TEST_TYPE_ABSTRACT_TEST_CASE (daf_unit_test_abstract_test_case_get_type ())
#define DAF_UNIT_TEST_ABSTRACT_TEST_CASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UNIT_TEST_TYPE_ABSTRACT_TEST_CASE, DafUnitTestAbstractTestCase))
#define DAF_UNIT_TEST_ABSTRACT_TEST_CASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UNIT_TEST_TYPE_ABSTRACT_TEST_CASE, DafUnitTestAbstractTestCaseClass))
#define DAF_UNIT_TEST_IS_ABSTRACT_TEST_CASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UNIT_TEST_TYPE_ABSTRACT_TEST_CASE))
#define DAF_UNIT_TEST_IS_ABSTRACT_TEST_CASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UNIT_TEST_TYPE_ABSTRACT_TEST_CASE))
#define DAF_UNIT_TEST_ABSTRACT_TEST_CASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UNIT_TEST_TYPE_ABSTRACT_TEST_CASE, DafUnitTestAbstractTestCaseClass))

typedef struct _DafUnitTestAbstractTestCase DafUnitTestAbstractTestCase;
typedef struct _DafUnitTestAbstractTestCaseClass DafUnitTestAbstractTestCaseClass;
typedef struct _DafUnitTestAbstractTestCasePrivate DafUnitTestAbstractTestCasePrivate;

#define DAF_UNIT_TEST_TYPE_ASSERT (daf_unit_test_assert_get_type ())
#define DAF_UNIT_TEST_ASSERT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DAF_UNIT_TEST_TYPE_ASSERT, DafUnitTestAssert))
#define DAF_UNIT_TEST_ASSERT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DAF_UNIT_TEST_TYPE_ASSERT, DafUnitTestAssertClass))
#define DAF_UNIT_TEST_IS_ASSERT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DAF_UNIT_TEST_TYPE_ASSERT))
#define DAF_UNIT_TEST_IS_ASSERT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DAF_UNIT_TEST_TYPE_ASSERT))
#define DAF_UNIT_TEST_ASSERT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DAF_UNIT_TEST_TYPE_ASSERT, DafUnitTestAssertClass))

typedef struct _DafUnitTestAssert DafUnitTestAssert;
typedef struct _DafUnitTestAssertClass DafUnitTestAssertClass;
typedef struct _DafUnitTestAssertPrivate DafUnitTestAssertPrivate;

typedef gboolean (*DafUnitTestPredicate) (gpointer user_data);
typedef void (*DafUnitTestBlock) (gpointer user_data);
typedef void (*DafUnitTestAsyncBegin) (GAsyncReadyCallback callback, gpointer callback_target, gpointer user_data);
typedef void (*DafUnitTestCancelableAsyncBegin) (GCancellable* cancel, GAsyncReadyCallback callback, gpointer callback_target, gpointer user_data);
typedef void (*DafUnitTestAsyncFinish) (GAsyncResult* _result_, gpointer user_data, GError** error);
struct _DafUnitTestMultiSignalWaiter {
	GObject parent_instance;
	DafUnitTestMultiSignalWaiterPrivate * priv;
};

struct _DafUnitTestMultiSignalWaiterClass {
	GObjectClass parent_class;
};

struct _DafUnitTestAbstractTestCase {
	GObject parent_instance;
	DafUnitTestAbstractTestCasePrivate * priv;
};

struct _DafUnitTestAbstractTestCaseClass {
	GObjectClass parent_class;
	void (*set_up) (DafUnitTestAbstractTestCase* self);
	void (*tear_down) (DafUnitTestAbstractTestCase* self);
};

typedef void (*DafUnitTestAbstractTestCaseTestMethod) (gpointer user_data);
typedef enum  {
	DAF_UNIT_TEST_ASSERT_ERROR_UNEXPECTED_VALUE,
	DAF_UNIT_TEST_ASSERT_ERROR_UNEXPECTED_STATE
} DafUnitTestAssertError;
#define DAF_UNIT_TEST_ASSERT_ERROR daf_unit_test_assert_error_quark ()
struct _DafUnitTestAssert {
	GObject parent_instance;
	DafUnitTestAssertPrivate * priv;
};

struct _DafUnitTestAssertClass {
	GObjectClass parent_class;
};


gboolean daf_unit_test_wait_for_condition (gint timeout,
                                           GObject* emitter,
                                           const gchar* signame,
                                           DafUnitTestPredicate predicate,
                                           gpointer predicate_target,
                                           GDestroyNotify predicate_target_destroy_notify,
                                           DafUnitTestBlock block,
                                           gpointer block_target);
gboolean daf_unit_test_wait_for_signal (gint timeout,
                                        GObject* emitter,
                                        const gchar* signame,
                                        DafUnitTestBlock block,
                                        gpointer block_target);
gboolean daf_unit_test_wait_for_async (gint timeout,
                                       DafUnitTestAsyncBegin async_function,
                                       gpointer async_function_target,
                                       DafUnitTestAsyncFinish async_finish,
                                       gpointer async_finish_target,
                                       GError** error);
gboolean daf_unit_test_wait_for_cancellable_async (gint timeout,
                                                   DafUnitTestCancelableAsyncBegin async_function,
                                                   gpointer async_function_target,
                                                   DafUnitTestAsyncFinish async_finish,
                                                   gpointer async_finish_target,
                                                   GError** error);
GType daf_unit_test_multi_signal_waiter_get_type (void) G_GNUC_CONST;
void daf_unit_test_multi_signal_waiter_add_signal (DafUnitTestMultiSignalWaiter* self,
                                                   GObject* emitter,
                                                   const gchar* signame,
                                                   gint timeout);
gboolean daf_unit_test_multi_signal_waiter_run (DafUnitTestMultiSignalWaiter* self,
                                                DafUnitTestBlock block,
                                                gpointer block_target,
                                                gint timeout);
DafUnitTestMultiSignalWaiter* daf_unit_test_multi_signal_waiter_new (void);
DafUnitTestMultiSignalWaiter* daf_unit_test_multi_signal_waiter_construct (GType object_type);
GType daf_unit_test_abstract_test_case_get_type (void) G_GNUC_CONST;
DafUnitTestAbstractTestCase* daf_unit_test_abstract_test_case_construct (GType object_type,
                                                                         const gchar* name);
void daf_unit_test_abstract_test_case_add_test (DafUnitTestAbstractTestCase* self,
                                                const gchar* name,
                                                DafUnitTestAbstractTestCaseTestMethod test,
                                                gpointer test_target);
void daf_unit_test_abstract_test_case_add_async_test (DafUnitTestAbstractTestCase* self,
                                                      const gchar* name,
                                                      DafUnitTestAsyncBegin async_begin,
                                                      gpointer async_begin_target,
                                                      DafUnitTestAsyncFinish async_finish,
                                                      gpointer async_finish_target,
                                                      gint timeout);
void daf_unit_test_abstract_test_case_set_up (DafUnitTestAbstractTestCase* self);
void daf_unit_test_abstract_test_case_tear_down (DafUnitTestAbstractTestCase* self);
GTestSuite* daf_unit_test_abstract_test_case_get_suite (DafUnitTestAbstractTestCase* self);
GQuark daf_unit_test_assert_error_quark (void);
GType daf_unit_test_assert_get_type (void) G_GNUC_CONST;
void daf_unit_test_assert_are_equal (GType t_type,
                                     GBoxedCopyFunc t_dup_func,
                                     GDestroyNotify t_destroy_func,
                                     gconstpointer expected,
                                     gconstpointer actual,
                                     const gchar* debug,
                                     GError** error);
void daf_unit_test_assert_are_not_equal (GType t_type,
                                         GBoxedCopyFunc t_dup_func,
                                         GDestroyNotify t_destroy_func,
                                         gconstpointer not_expected,
                                         gconstpointer actual,
                                         const gchar* debug,
                                         GError** error);
void daf_unit_test_assert_is_true (gboolean actual,
                                   const gchar* debug,
                                   GError** error);
void daf_unit_test_assert_is_false (gboolean actual,
                                    const gchar* debug,
                                    GError** error);
void daf_unit_test_assert_fail (const gchar* debug,
                                GError** error);
void daf_unit_test_assert_should_throw_async (DafUnitTestAsyncBegin fbegin,
                                              gpointer fbegin_target,
                                              DafUnitTestAsyncFinish ffinish,
                                              gpointer ffinish_target,
                                              const gchar* domain,
                                              const gchar* debug,
                                              GError** error);
DafUnitTestAssert* daf_unit_test_assert_new (void);
DafUnitTestAssert* daf_unit_test_assert_construct (GType object_type);


G_END_DECLS

#endif
